generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  preferences UserPreferences?
  mealPlans   MealPlan[]

  @@map("users")
}

model UserPreferences {
  id             String   @id @default(cuid())
  userId         String   @unique
  dailyCalories  Int      @default(2000)
  dailyProtein   Int      @default(150)
  dailyCarbs     Int?
  dailyFats      Int?
  allergies      String[] @default([])
  dietaryGoals   String[] @default([])
  preferredMeals String[] @default([])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model DiningHall {
  id          String @id @default(cuid())
  name        String
  location    String
  university  String
  nutrisliceId String @unique

  menuItems MenuItem[]

  @@map("dining_halls")
}

model MenuItem {
  id             String  @id @default(cuid())
  name           String
  description    String?
  calories       Int
  protein        Float
  carbs          Float
  fats           Float
  fiber          Float?
  sugar          Float?
  sodium         Float?
  allergens      String[] @default([])
  category       String
  servingSize    String
  nutrisliceId   String
  diningHallId   String
  isVegan        Boolean @default(false)
  isVegetarian   Boolean @default(false)
  isGlutenFree   Boolean @default(false)

  diningHall DiningHall @relation(fields: [diningHallId], references: [id])
  mealPlanItems MealPlanItem[]

  @@map("menu_items")
}

model MealPlan {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  totalCalories Int
  totalProtein  Float
  totalCarbs    Float
  totalFats     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  items MealPlanItem[]

  @@map("meal_plans")
}

model MealPlanItem {
  id         String @id @default(cuid())
  mealPlanId String
  menuItemId String
  mealType   String // breakfast, lunch, dinner, snack
  servings   Float  @default(1)
  mealPlan MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)
  menuItem MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("meal_plan_items")
}